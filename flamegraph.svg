<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="1227"><g><title>fish-engine`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.3260%" y="213" width="0.0815%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.5760%" y="223.50"></text></g><g><title>fish-engine`&lt;fish_engine::cards::RankIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="0.4075%" y="213" width="0.2445%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="3"/><text x="0.6575%" y="223.50"></text></g><g><title>fish-engine`fish_engine::Game::check_books (1 samples, 0.08%)</title><rect x="0.6520%" y="213" width="0.0815%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="1"/><text x="0.9020%" y="223.50"></text></g><g><title>fish-engine`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.7335%" y="181" width="0.0815%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="1"/><text x="0.9835%" y="191.50"></text></g><g><title>fish-engine`fish_engine::Game::new (2 samples, 0.16%)</title><rect x="0.7335%" y="213" width="0.1630%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="2"/><text x="0.9835%" y="223.50"></text></g><g><title>fish-engine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="0.7335%" y="197" width="0.1630%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="2"/><text x="0.9835%" y="207.50"></text></g><g><title>fish-engine`fish_engine::Player::new (1 samples, 0.08%)</title><rect x="0.8150%" y="181" width="0.0815%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="1"/><text x="1.0650%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="6.1125%" y="133" width="0.0815%" height="15" fill="rgb(228,23,34)" fg:x="75" fg:w="1"/><text x="6.3625%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="6.1940%" y="133" width="0.0815%" height="15" fill="rgb(218,30,26)" fg:x="76" fg:w="1"/><text x="6.4440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="6.7645%" y="101" width="0.0815%" height="15" fill="rgb(220,122,19)" fg:x="83" fg:w="1"/><text x="7.0145%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="6.8460%" y="101" width="0.0815%" height="15" fill="rgb(250,228,42)" fg:x="84" fg:w="1"/><text x="7.0960%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.16%)</title><rect x="6.9275%" y="101" width="0.1630%" height="15" fill="rgb(240,193,28)" fg:x="85" fg:w="2"/><text x="7.1775%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.16%)</title><rect x="7.0905%" y="101" width="0.1630%" height="15" fill="rgb(216,20,37)" fg:x="87" fg:w="2"/><text x="7.3405%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.16%)</title><rect x="7.0905%" y="85" width="0.1630%" height="15" fill="rgb(206,188,39)" fg:x="87" fg:w="2"/><text x="7.3405%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.81%)</title><rect x="6.6015%" y="117" width="0.8150%" height="15" fill="rgb(217,207,13)" fg:x="81" fg:w="10"/><text x="6.8515%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.16%)</title><rect x="7.2535%" y="101" width="0.1630%" height="15" fill="rgb(231,73,38)" fg:x="89" fg:w="2"/><text x="7.5035%" y="111.50"></text></g><g><title>fish-engine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 2.53%)</title><rect x="5.0530%" y="181" width="2.5265%" height="15" fill="rgb(225,20,46)" fg:x="62" fg:w="31"/><text x="5.3030%" y="191.50">fi..</text></g><g><title>fish-engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 1.63%)</title><rect x="5.9495%" y="165" width="1.6300%" height="15" fill="rgb(210,31,41)" fg:x="73" fg:w="20"/><text x="6.1995%" y="175.50"></text></g><g><title>fish-engine`alloc::raw_vec::finish_grow (19 samples, 1.55%)</title><rect x="6.0310%" y="149" width="1.5485%" height="15" fill="rgb(221,200,47)" fg:x="74" fg:w="19"/><text x="6.2810%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 1.30%)</title><rect x="6.2755%" y="133" width="1.3040%" height="15" fill="rgb(226,26,5)" fg:x="77" fg:w="16"/><text x="6.5255%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.16%)</title><rect x="7.4165%" y="117" width="0.1630%" height="15" fill="rgb(249,33,26)" fg:x="91" fg:w="2"/><text x="7.6665%" y="127.50"></text></g><g><title>fish-engine`DYLD-STUB$$malloc (2 samples, 0.16%)</title><rect x="7.5795%" y="181" width="0.1630%" height="15" fill="rgb(235,183,28)" fg:x="93" fg:w="2"/><text x="7.8295%" y="191.50"></text></g><g><title>fish-engine`__rdl_alloc (1 samples, 0.08%)</title><rect x="7.7425%" y="181" width="0.0815%" height="15" fill="rgb(221,5,38)" fg:x="95" fg:w="1"/><text x="7.9925%" y="191.50"></text></g><g><title>fish-engine`fastrand::RNG::__getit (1 samples, 0.08%)</title><rect x="7.8240%" y="181" width="0.0815%" height="15" fill="rgb(247,18,42)" fg:x="96" fg:w="1"/><text x="8.0740%" y="191.50"></text></g><g><title>fish-engine`fastrand::RNG::__getit (1 samples, 0.08%)</title><rect x="11.0024%" y="149" width="0.0815%" height="15" fill="rgb(241,131,45)" fg:x="135" fg:w="1"/><text x="11.2524%" y="159.50"></text></g><g><title>fish-engine`fish_engine::cards::Cards::choose_random (45 samples, 3.67%)</title><rect x="7.9055%" y="181" width="3.6675%" height="15" fill="rgb(249,31,29)" fg:x="97" fg:w="45"/><text x="8.1555%" y="191.50">fish..</text></g><g><title>fish-engine`std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.57%)</title><rect x="11.0024%" y="165" width="0.5705%" height="15" fill="rgb(225,111,53)" fg:x="135" fg:w="7"/><text x="11.2524%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.49%)</title><rect x="11.0839%" y="149" width="0.4890%" height="15" fill="rgb(238,160,17)" fg:x="136" fg:w="6"/><text x="11.3339%" y="159.50"></text></g><g><title>fish-engine`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="12.1434%" y="101" width="0.0815%" height="15" fill="rgb(214,148,48)" fg:x="149" fg:w="1"/><text x="12.3934%" y="111.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (13 samples, 1.06%)</title><rect x="12.5509%" y="85" width="1.0595%" height="15" fill="rgb(232,36,49)" fg:x="154" fg:w="13"/><text x="12.8009%" y="95.50"></text></g><g><title>fish-engine`core::slice::memchr::memrchr (6 samples, 0.49%)</title><rect x="13.1214%" y="69" width="0.4890%" height="15" fill="rgb(209,103,24)" fg:x="161" fg:w="6"/><text x="13.3714%" y="79.50"></text></g><g><title>fish-engine`DYLD-STUB$$memcpy (2 samples, 0.16%)</title><rect x="13.6104%" y="85" width="0.1630%" height="15" fill="rgb(229,88,8)" fg:x="167" fg:w="2"/><text x="13.8604%" y="95.50"></text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (24 samples, 1.96%)</title><rect x="12.2249%" y="101" width="1.9560%" height="15" fill="rgb(213,181,19)" fg:x="150" fg:w="24"/><text x="12.4749%" y="111.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.41%)</title><rect x="13.7734%" y="85" width="0.4075%" height="15" fill="rgb(254,191,54)" fg:x="169" fg:w="5"/><text x="14.0234%" y="95.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.24%)</title><rect x="14.1809%" y="101" width="0.2445%" height="15" fill="rgb(241,83,37)" fg:x="174" fg:w="3"/><text x="14.4309%" y="111.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.24%)</title><rect x="14.7514%" y="69" width="0.2445%" height="15" fill="rgb(233,36,39)" fg:x="181" fg:w="3"/><text x="15.0014%" y="79.50"></text></g><g><title>fish-engine`core::slice::memchr::memrchr (2 samples, 0.16%)</title><rect x="14.8329%" y="53" width="0.1630%" height="15" fill="rgb(226,3,54)" fg:x="182" fg:w="2"/><text x="15.0829%" y="63.50"></text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.57%)</title><rect x="14.6699%" y="85" width="0.5705%" height="15" fill="rgb(245,192,40)" fg:x="180" fg:w="7"/><text x="14.9199%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.24%)</title><rect x="14.9959%" y="69" width="0.2445%" height="15" fill="rgb(238,167,29)" fg:x="184" fg:w="3"/><text x="15.2459%" y="79.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.16%)</title><rect x="15.2404%" y="85" width="0.1630%" height="15" fill="rgb(232,182,51)" fg:x="187" fg:w="2"/><text x="15.4904%" y="95.50"></text></g><g><title>fish-engine`core::fmt::Formatter::debug_lower_hex (1 samples, 0.08%)</title><rect x="15.4034%" y="85" width="0.0815%" height="15" fill="rgb(231,60,39)" fg:x="189" fg:w="1"/><text x="15.6534%" y="95.50"></text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="15.8109%" y="69" width="0.2445%" height="15" fill="rgb(208,69,12)" fg:x="194" fg:w="3"/><text x="16.0609%" y="79.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.24%)</title><rect x="15.8109%" y="53" width="0.2445%" height="15" fill="rgb(235,93,37)" fg:x="194" fg:w="3"/><text x="16.0609%" y="63.50"></text></g><g><title>fish-engine`core::slice::memchr::memrchr (1 samples, 0.08%)</title><rect x="15.9739%" y="37" width="0.0815%" height="15" fill="rgb(213,116,39)" fg:x="196" fg:w="1"/><text x="16.2239%" y="47.50"></text></g><g><title>fish-engine`core::fmt::Formatter::debug_tuple_field1_finish (49 samples, 3.99%)</title><rect x="12.1434%" y="117" width="3.9935%" height="15" fill="rgb(222,207,29)" fg:x="149" fg:w="49"/><text x="12.3934%" y="127.50">fish..</text></g><g><title>fish-engine`core::fmt::builders::DebugTuple::field (21 samples, 1.71%)</title><rect x="14.4254%" y="101" width="1.7115%" height="15" fill="rgb(206,96,30)" fg:x="177" fg:w="21"/><text x="14.6754%" y="111.50"></text></g><g><title>fish-engine`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (8 samples, 0.65%)</title><rect x="15.4849%" y="85" width="0.6520%" height="15" fill="rgb(218,138,4)" fg:x="190" fg:w="8"/><text x="15.7349%" y="95.50"></text></g><g><title>fish-engine`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="16.0554%" y="69" width="0.0815%" height="15" fill="rgb(250,191,14)" fg:x="197" fg:w="1"/><text x="16.3054%" y="79.50"></text></g><g><title>fish-engine`&lt;fish_engine::strategy::PlayerId as core::fmt::Debug&gt;::fmt (52 samples, 4.24%)</title><rect x="12.0619%" y="133" width="4.2380%" height="15" fill="rgb(239,60,40)" fg:x="148" fg:w="52"/><text x="12.3119%" y="143.50">fish-..</text></g><g><title>fish-engine`core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="16.1369%" y="117" width="0.1630%" height="15" fill="rgb(206,27,48)" fg:x="198" fg:w="2"/><text x="16.3869%" y="127.50"></text></g><g><title>fish-engine`core::slice::memchr::memrchr (2 samples, 0.16%)</title><rect x="16.5444%" y="101" width="0.1630%" height="15" fill="rgb(225,35,8)" fg:x="203" fg:w="2"/><text x="16.7944%" y="111.50"></text></g><g><title>fish-engine`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.16%)</title><rect x="16.7074%" y="101" width="0.1630%" height="15" fill="rgb(250,213,24)" fg:x="205" fg:w="2"/><text x="16.9574%" y="111.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (623 samples, 50.77%)</title><rect x="16.2999%" y="117" width="50.7742%" height="15" fill="rgb(247,123,22)" fg:x="200" fg:w="623"/><text x="16.5499%" y="127.50">fish-engine`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>libsystem_kernel.dylib`write (616 samples, 50.20%)</title><rect x="16.8704%" y="101" width="50.2037%" height="15" fill="rgb(231,138,38)" fg:x="207" fg:w="616"/><text x="17.1204%" y="111.50">libsystem_kernel.dylib`write</text></g><g><title>fish-engine`core::fmt::write (677 samples, 55.18%)</title><rect x="11.9804%" y="149" width="55.1752%" height="15" fill="rgb(231,145,46)" fg:x="147" fg:w="677"/><text x="12.2304%" y="159.50">fish-engine`core::fmt::write</text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (624 samples, 50.86%)</title><rect x="16.2999%" y="133" width="50.8557%" height="15" fill="rgb(251,118,11)" fg:x="200" fg:w="624"/><text x="16.5499%" y="143.50">fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str</text></g><g><title>fish-engine`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.08%)</title><rect x="67.0742%" y="117" width="0.0815%" height="15" fill="rgb(217,147,25)" fg:x="823" fg:w="1"/><text x="67.3242%" y="127.50"></text></g><g><title>fish-engine`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (684 samples, 55.75%)</title><rect x="11.6544%" y="165" width="55.7457%" height="15" fill="rgb(247,81,37)" fg:x="143" fg:w="684"/><text x="11.9044%" y="175.50">fish-engine`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.24%)</title><rect x="67.1557%" y="149" width="0.2445%" height="15" fill="rgb(209,12,38)" fg:x="824" fg:w="3"/><text x="67.4057%" y="159.50"></text></g><g><title>fish-engine`std::io::stdio::_print (686 samples, 55.91%)</title><rect x="11.5729%" y="181" width="55.9087%" height="15" fill="rgb(227,1,9)" fg:x="142" fg:w="686"/><text x="11.8229%" y="191.50">fish-engine`std::io::stdio::_print</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.08%)</title><rect x="67.4002%" y="165" width="0.0815%" height="15" fill="rgb(248,47,43)" fg:x="827" fg:w="1"/><text x="67.6502%" y="175.50"></text></g><g><title>fish-engine`std::io::stdio::print_to_buffer_if_capture_used (1 samples, 0.08%)</title><rect x="67.4817%" y="181" width="0.0815%" height="15" fill="rgb(221,10,30)" fg:x="828" fg:w="1"/><text x="67.7317%" y="191.50"></text></g><g><title>fish-engine`fastrand::RNG::__getit (1 samples, 0.08%)</title><rect x="67.6447%" y="165" width="0.0815%" height="15" fill="rgb(210,229,1)" fg:x="830" fg:w="1"/><text x="67.8947%" y="175.50"></text></g><g><title>fish-engine`std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 0.41%)</title><rect x="67.5632%" y="181" width="0.4075%" height="15" fill="rgb(222,148,37)" fg:x="829" fg:w="5"/><text x="67.8132%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.24%)</title><rect x="67.7262%" y="165" width="0.2445%" height="15" fill="rgb(234,67,33)" fg:x="831" fg:w="3"/><text x="67.9762%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.24%)</title><rect x="67.9707%" y="181" width="0.2445%" height="15" fill="rgb(247,98,35)" fg:x="834" fg:w="3"/><text x="68.2207%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.33%)</title><rect x="68.2152%" y="181" width="0.3260%" height="15" fill="rgb(247,138,52)" fg:x="837" fg:w="4"/><text x="68.4652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.24%)</title><rect x="68.5412%" y="181" width="0.2445%" height="15" fill="rgb(213,79,30)" fg:x="841" fg:w="3"/><text x="68.7912%" y="191.50"></text></g><g><title>fish-engine`&lt;fish_engine::random_strat::Random as fish_engine::strategy::Strategy&gt;::action (793 samples, 64.63%)</title><rect x="4.5640%" y="197" width="64.6292%" height="15" fill="rgb(246,177,23)" fg:x="56" fg:w="793"/><text x="4.8140%" y="207.50">fish-engine`&lt;fish_engine::random_strat::Random as fish_engine::strategy::Strategy&gt;::action</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.41%)</title><rect x="68.7857%" y="181" width="0.4075%" height="15" fill="rgb(230,62,27)" fg:x="844" fg:w="5"/><text x="69.0357%" y="191.50"></text></g><g><title>fish-engine`DYLD-STUB$$realloc (1 samples, 0.08%)</title><rect x="69.2747%" y="181" width="0.0815%" height="15" fill="rgb(216,154,8)" fg:x="850" fg:w="1"/><text x="69.5247%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.08%)</title><rect x="69.3562%" y="165" width="0.0815%" height="15" fill="rgb(244,35,45)" fg:x="851" fg:w="1"/><text x="69.6062%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.08%)</title><rect x="69.4377%" y="165" width="0.0815%" height="15" fill="rgb(251,115,12)" fg:x="852" fg:w="1"/><text x="69.6877%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.08%)</title><rect x="69.6007%" y="117" width="0.0815%" height="15" fill="rgb(240,54,50)" fg:x="854" fg:w="1"/><text x="69.8507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.24%)</title><rect x="69.5192%" y="133" width="0.2445%" height="15" fill="rgb(233,84,52)" fg:x="853" fg:w="3"/><text x="69.7692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="69.6822%" y="117" width="0.0815%" height="15" fill="rgb(207,117,47)" fg:x="855" fg:w="1"/><text x="69.9322%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="69.6822%" y="101" width="0.0815%" height="15" fill="rgb(249,43,39)" fg:x="855" fg:w="1"/><text x="69.9322%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="69.6822%" y="85" width="0.0815%" height="15" fill="rgb(209,38,44)" fg:x="855" fg:w="1"/><text x="69.9322%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.08%)</title><rect x="69.7637%" y="117" width="0.0815%" height="15" fill="rgb(236,212,23)" fg:x="856" fg:w="1"/><text x="70.0137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.08%)</title><rect x="69.7637%" y="101" width="0.0815%" height="15" fill="rgb(242,79,21)" fg:x="856" fg:w="1"/><text x="70.0137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="69.7637%" y="85" width="0.0815%" height="15" fill="rgb(211,96,35)" fg:x="856" fg:w="1"/><text x="70.0137%" y="95.50"></text></g><g><title>fish-engine`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.73%)</title><rect x="69.1932%" y="197" width="0.7335%" height="15" fill="rgb(253,215,40)" fg:x="849" fg:w="9"/><text x="69.4432%" y="207.50"></text></g><g><title>fish-engine`alloc::raw_vec::finish_grow (7 samples, 0.57%)</title><rect x="69.3562%" y="181" width="0.5705%" height="15" fill="rgb(211,81,21)" fg:x="851" fg:w="7"/><text x="69.6062%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.41%)</title><rect x="69.5192%" y="165" width="0.4075%" height="15" fill="rgb(208,190,38)" fg:x="853" fg:w="5"/><text x="69.7692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.41%)</title><rect x="69.5192%" y="149" width="0.4075%" height="15" fill="rgb(235,213,38)" fg:x="853" fg:w="5"/><text x="69.7692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.16%)</title><rect x="69.7637%" y="133" width="0.1630%" height="15" fill="rgb(237,122,38)" fg:x="856" fg:w="2"/><text x="70.0137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.08%)</title><rect x="69.8452%" y="117" width="0.0815%" height="15" fill="rgb(244,218,35)" fg:x="857" fg:w="1"/><text x="70.0952%" y="127.50"></text></g><g><title>fish-engine`fish_engine::Game::check_books (87 samples, 7.09%)</title><rect x="69.9267%" y="197" width="7.0905%" height="15" fill="rgb(240,68,47)" fg:x="858" fg:w="87"/><text x="70.1767%" y="207.50">fish-engin..</text></g><g><title>fish-engine`fish_engine::Game::check_validity (29 samples, 2.36%)</title><rect x="77.0171%" y="197" width="2.3635%" height="15" fill="rgb(210,16,53)" fg:x="945" fg:w="29"/><text x="77.2671%" y="207.50">fi..</text></g><g><title>fish-engine`fastrand::RNG::__getit (1 samples, 0.08%)</title><rect x="81.9071%" y="165" width="0.0815%" height="15" fill="rgb(235,124,12)" fg:x="1005" fg:w="1"/><text x="82.1571%" y="175.50"></text></g><g><title>fish-engine`fish_engine::cards::Cards::choose_random (34 samples, 2.77%)</title><rect x="79.3806%" y="197" width="2.7710%" height="15" fill="rgb(224,169,11)" fg:x="974" fg:w="34"/><text x="79.6306%" y="207.50">fi..</text></g><g><title>fish-engine`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.24%)</title><rect x="81.9071%" y="181" width="0.2445%" height="15" fill="rgb(250,166,2)" fg:x="1005" fg:w="3"/><text x="82.1571%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.16%)</title><rect x="81.9886%" y="165" width="0.1630%" height="15" fill="rgb(242,216,29)" fg:x="1006" fg:w="2"/><text x="82.2386%" y="175.50"></text></g><g><title>fish-engine`fish_engine::cards::Cards::num (118 samples, 9.62%)</title><rect x="82.1516%" y="197" width="9.6170%" height="15" fill="rgb(230,116,27)" fg:x="1008" fg:w="118"/><text x="82.4016%" y="207.50">fish-engine`fi..</text></g><g><title>fish-engine`fish_engine::strategy::Context::update (41 samples, 3.34%)</title><rect x="91.7685%" y="197" width="3.3415%" height="15" fill="rgb(228,99,48)" fg:x="1126" fg:w="41"/><text x="92.0185%" y="207.50">fis..</text></g><g><title>fish-engine`fish_engine::cards::Cards::num (40 samples, 3.26%)</title><rect x="91.8500%" y="181" width="3.2600%" height="15" fill="rgb(253,11,6)" fg:x="1127" fg:w="40"/><text x="92.1000%" y="191.50">fis..</text></g><g><title>fish-engine`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.08%)</title><rect x="95.1100%" y="197" width="0.0815%" height="15" fill="rgb(247,143,39)" fg:x="1167" fg:w="1"/><text x="95.3600%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.24%)</title><rect x="95.1915%" y="197" width="0.2445%" height="15" fill="rgb(236,97,10)" fg:x="1168" fg:w="3"/><text x="95.4415%" y="207.50"></text></g><g><title>fish-engine`fish_engine::Game::step (1,162 samples, 94.70%)</title><rect x="0.8965%" y="213" width="94.7025%" height="15" fill="rgb(233,208,19)" fg:x="11" fg:w="1162"/><text x="1.1465%" y="223.50">fish-engine`fish_engine::Game::step</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.16%)</title><rect x="95.4360%" y="197" width="0.1630%" height="15" fill="rgb(216,164,2)" fg:x="1171" fg:w="2"/><text x="95.6860%" y="207.50"></text></g><g><title>fish-engine`fish_engine::cards::Cards::num (10 samples, 0.81%)</title><rect x="95.5990%" y="213" width="0.8150%" height="15" fill="rgb(220,129,5)" fg:x="1173" fg:w="10"/><text x="95.8490%" y="223.50"></text></g><g><title>fish-engine`fish_engine::strategy::Context::update (2 samples, 0.16%)</title><rect x="96.4140%" y="213" width="0.1630%" height="15" fill="rgb(242,17,10)" fg:x="1183" fg:w="2"/><text x="96.6640%" y="223.50"></text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.98%)</title><rect x="96.5770%" y="165" width="0.9780%" height="15" fill="rgb(242,107,0)" fg:x="1185" fg:w="12"/><text x="96.8270%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 0.98%)</title><rect x="96.5770%" y="149" width="0.9780%" height="15" fill="rgb(251,28,31)" fg:x="1185" fg:w="12"/><text x="96.8270%" y="159.50"></text></g><g><title>fish-engine`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 0.08%)</title><rect x="97.5550%" y="133" width="0.0815%" height="15" fill="rgb(233,223,10)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="143.50"></text></g><g><title>fish-engine`std::io::stdio::_eprint (40 samples, 3.26%)</title><rect x="96.5770%" y="213" width="3.2600%" height="15" fill="rgb(215,21,27)" fg:x="1185" fg:w="40"/><text x="96.8270%" y="223.50">fis..</text></g><g><title>fish-engine`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (40 samples, 3.26%)</title><rect x="96.5770%" y="197" width="3.2600%" height="15" fill="rgb(232,23,21)" fg:x="1185" fg:w="40"/><text x="96.8270%" y="207.50">fis..</text></g><g><title>fish-engine`core::fmt::write (40 samples, 3.26%)</title><rect x="96.5770%" y="181" width="3.2600%" height="15" fill="rgb(244,5,23)" fg:x="1185" fg:w="40"/><text x="96.8270%" y="191.50">fis..</text></g><g><title>fish-engine`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (28 samples, 2.28%)</title><rect x="97.5550%" y="165" width="2.2820%" height="15" fill="rgb(226,81,46)" fg:x="1197" fg:w="28"/><text x="97.8050%" y="175.50">f..</text></g><g><title>fish-engine`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (28 samples, 2.28%)</title><rect x="97.5550%" y="149" width="2.2820%" height="15" fill="rgb(247,70,30)" fg:x="1197" fg:w="28"/><text x="97.8050%" y="159.50">f..</text></g><g><title>libsystem_kernel.dylib`write (27 samples, 2.20%)</title><rect x="97.6365%" y="133" width="2.2005%" height="15" fill="rgb(212,68,19)" fg:x="1198" fg:w="27"/><text x="97.8865%" y="143.50">l..</text></g><g><title>dyld`start (1,226 samples, 99.92%)</title><rect x="0.0000%" y="309" width="99.9185%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>fish-engine`main (1,226 samples, 99.92%)</title><rect x="0.0000%" y="293" width="99.9185%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="303.50">fish-engine`main</text></g><g><title>fish-engine`std::rt::lang_start_internal (1,226 samples, 99.92%)</title><rect x="0.0000%" y="277" width="99.9185%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="287.50">fish-engine`std::rt::lang_start_internal</text></g><g><title>fish-engine`std::rt::lang_start::_{{closure}} (1,226 samples, 99.92%)</title><rect x="0.0000%" y="261" width="99.9185%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="271.50">fish-engine`std::rt::lang_start::_{{closure}}</text></g><g><title>fish-engine`std::sys_common::backtrace::__rust_begin_short_backtrace (1,226 samples, 99.92%)</title><rect x="0.0000%" y="245" width="99.9185%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="255.50">fish-engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>fish-engine`fish_engine::main (1,226 samples, 99.92%)</title><rect x="0.0000%" y="229" width="99.9185%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="239.50">fish-engine`fish_engine::main</text></g><g><title>fish-engine`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.08%)</title><rect x="99.8370%" y="213" width="0.0815%" height="15" fill="rgb(245,159,27)" fg:x="1225" fg:w="1"/><text x="100.0870%" y="223.50"></text></g><g><title>all (1,227 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.08%)</title><rect x="99.9185%" y="309" width="0.0815%" height="15" fill="rgb(236,23,11)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="319.50"></text></g></svg></svg>